from google.colab import drive
drive.mount('/content/drive')

import numpy as nm
import matplotlib.pyplot as mtp
import pandas as pd

#importing datasets
data_set= pd.read_csv('/content/drive/MyDrive/Iris.csv')

data_set.head(4)

data_set['Species'].unique()

#Extracting Independent and dependent Variable
x= data_set.iloc[:, [1,4]].values
y= data_set.iloc[:, 5].values

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
y=le.fit_transform(y)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test= train_test_split(x, y, test_size= 0.25, random_state=0)

from sklearn.svm import SVC # "Support vector classifier"
classifier = SVC(kernel='linear', random_state=0)
classifier.fit(x_train, y_train)

y_pred= classifier.predict(x_test)

y_pred

y_test

c=0
e=0
for i in range(0,len(y_test)):
    if(y_pred[i]==y_test[i]):
        c=c+1;
    else:
        e=e+1
print("Accuracy is ",(c/len(y_test))*100)
print("Error is ",(e/len(y_test))*100)

from sklearn.metrics import confusion_matrix
cm= confusion_matrix(y_test, y_pred)
cm

from matplotlib.colors import ListedColormap
x_set, y_set = x_train, y_train
x1, x2 = nm.meshgrid(nm.arange(start = x_set[:, 0].min() - 1, stop = x_set[:, 0].max() + 1, step  =0.01),
nm.arange(start = x_set[:, 1].min() - 1, stop = x_set[:, 1].max() + 1, step = 0.01))
mtp.contourf(x1, x2, classifier.predict(nm.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),
alpha = 0.75, cmap = ListedColormap(('red', 'green','blue')))
mtp.xlim(x1.min(), x1.max())
mtp.ylim(x2.min(), x2.max())
for i, j in enumerate(nm.unique(y_set)):
    mtp.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1],
                c = ListedColormap(('yellow', 'cyan','orange'))(i), label = j)
mtp.title('SVM classifier (Training set)')
mtp.xlabel('SepalLengthCm')
mtp.ylabel('PetalWidthCm')
mtp.legend()
mtp.show()

from matplotlib.colors import ListedColormap
x_set, y_set = x_test, y_test
x1, x2 = nm.meshgrid(nm.arange(start = x_set[:, 0].min() - 1, stop = x_set[:, 0].max() + 1, step  =0.01),
nm.arange(start = x_set[:, 1].min() - 1, stop = x_set[:, 1].max() + 1, step = 0.01))
mtp.contourf(x1, x2, classifier.predict(nm.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),
alpha = 0.75, cmap = ListedColormap(('red', 'green','blue')))
mtp.xlim(x1.min(), x1.max())
mtp.ylim(x2.min(), x2.max())
for i, j in enumerate(nm.unique(y_set)):
    mtp.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1],
                c = ListedColormap(('yellow', 'cyan','orange'))(i), label = j)
mtp.title('SVM classifier (Training set)')
mtp.xlabel('SepalLengthCm')
mtp.ylabel('PetalWidthCm')
mtp.legend()
mtp.show()




























