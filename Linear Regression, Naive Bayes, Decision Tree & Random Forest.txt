Linear Regression, Naive Bayes, Decision Tree & Random Forest

Linear Regression

from google.colab import drive
drive.mount('/content/drive')

import csv

import numpy as np

import pandas as pd

mydata= pd.read_csv('/content/drive/MyDrive/Iris.csv')

mydata.tail()

x=pd.DataFrame(mydata)

import matplotlib.pyplot as plt

x.plot()

x['SepalWidthCm'].plot(kind='hist')

x['SepalLengthCm'].plot(kind='hist')

x['PetalLengthCm'].plot(kind='hist')

x['PetalWidthCm'].plot(kind='hist')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns

mydata.info()

sns.pairplot(mydata)

x=mydata[['PetalLengthCm']]
y=mydata['PetalWidthCm']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

import numpy as np
from sklearn.linear_model import LinearRegression

model = LinearRegression()

model.fit(X_train, y_train)

print(model.coef_)

print(model.intercept_)

pd.DataFrame(model.coef_, x.columns, columns = ['Coeff'])

predictions = model.predict(X_test)

plt.scatter(y_test, X_test, color ='r')
plt.scatter(y_test, predictions, color ='b')
plt.show()

plt.hist(y_test - predictions)

y_test

Naive Bayes Classification

from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.datasets import load_iris

mydata['Species'].unique()

#Extracting Independent and dependent Variable
x= mydata.iloc[:, [1,4]].values
y= mydata.iloc[:, 5].values

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
y=le.fit_transform(y)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test= train_test_split(x, y, test_size= 0.25, random_state=0)

# Initialize the Naive Bayes classifier
naive_bayes = GaussianNB()
# Train the classifier
naive_bayes.fit(x_train, y_train)
# Predict the labels for the test set
y_pred = naive_bayes.predict(x_test)
# Calculate the accuracy of the classifier
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
# Print the classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
# Print the confusion matrix
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

Decision Tree Classification

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.datasets import load_iris

mydata['Species'].unique()

#Extracting Independent and dependent Variable
x= mydata.iloc[:, [1,4]].values
y= mydata.iloc[:, 5].values

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
y=le.fit_transform(y)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test= train_test_split(x, y, test_size= 0.25, random_state=0)

# Initialize the Naive Bayes classifier
naive_bayes = DecisionTreeClassifier()
# Train the classifier
naive_bayes.fit(x_train, y_train)
# Predict the labels for the test set
y_pred = naive_bayes.predict(x_test)
# Calculate the accuracy of the classifier
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
# Print the classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
# Print the confusion matrix
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

Random Forest Classification

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.datasets import load_iris

mydata['Species'].unique()

#Extracting Independent and dependent Variable
x= mydata.iloc[:, [1,4]].values
y= mydata.iloc[:, 5].values

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
y=le.fit_transform(y)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test= train_test_split(x, y, test_size= 0.25, random_state=0)

# Initialize the Naive Bayes classifier
naive_bayes = RandomForestClassifier(criterion='entropy')
# Train the classifier
naive_bayes.fit(x_train, y_train)
# Predict the labels for the test set
y_pred = naive_bayes.predict(x_test)
# Calculate the accuracy of the classifier
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
# Print the classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
# Print the confusion matrix
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

